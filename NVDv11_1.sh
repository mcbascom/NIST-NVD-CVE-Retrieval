#!/bin/bash

# Objective: This program queries NIST's National Vulnerability Database (NVD) and 
# downloads the most recent zipped json data file of Common Vulnerabilities & 
# Exposures (CVEs). It compares the file's hash to the hash of the previous json 
# data file. If the hashes differ or there is no previous data file, an alert is 
# printed to the user with the new CVE data. 


# File system artifacts: 
# nvdcve-1.1-modified.json, cve_alert.txt, previous_cve_hash.txt
# These files are overwritten each time the program is run.

# Use the following steps to run this program in the background:

 # chmod +x program.sh
 # ./program.sh &
 # disown -a
 # exit

# Stop the program from another shell window like this:

 # ps aux | head -n 1 && ps aux | grep program.sh  # Note the program PID.
 # kill -KILL (PID of program.sh)

cycle_time=3600                  # In seconds, time between wget queries.
url="https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz"
hash_file_path="previous_cve_hash.txt"
temp_file_path="cve_alert.txt"

while true;
do          

current_hash=$(wget -qO- "$url" | sha256sum | awk '{print $1}')
previous_cve_hash=$(cat "$hash_file_path" 2> /dev/null)

 # The program assigns a value to the hash file if the new hash 
 # doesn't exist or if the data file is new.

if [ "$current_hash" != "$previous_cve_hash" ]; then
echo "$current_hash" > "$hash_file_path"

wget --clobber "$url" -O nvdcve-1.1-modified.json.gz

gunzip -f nvdcve-1.1-modified.json.gz

 # Parse the desired data from the json file.

data_type=$(jq -r '.CVE_Items[0].cve.data_type' nvdcve-1.1-modified.json)
data_format=$(jq -r '.CVE_Items[0].cve.data_format' nvdcve-1.1-modified.json)
id=$(jq -r '.CVE_Items[0].cve.CVE_data_meta.ID' nvdcve-1.1-modified.json)
value=$(jq -r '.CVE_Items[0].cve.description.description_data[0].value' nvdcve-1.1-modified.json)
published_date=$(jq -r '.CVE_Items[0].publishedDate' nvdcve-1.1-modified.json)

 # Data that will be used in the alert is save in a .txt file.

echo "Data Type: $data_type" > "$temp_file_path"
echo "Data Format: $data_format" >> "$temp_file_path"
echo "ID: $id" >> "$temp_file_path"
echo "" >> "$temp_file_path" # formatting space.    
echo "Value: $value" >> "$temp_file_path"
echo "" >> "$temp_file_path" # formatting space.    
echo "Published Date: $published_date" >> "$temp_file_path"

zenity --info --title="New CVE Update" --text="$(cat "$temp_file_path")"

 # An alternative to zenity is notify-send.
notify-send "New CVE Update" "$(cat "$temp_file_path")"

fi

sleep $cycle_time;       # Repeat every hour: 60 sec/min * 60 min/hr = 3600 sec/hr
done
